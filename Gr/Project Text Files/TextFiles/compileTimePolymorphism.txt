    Compile time polymorphism:
        This type of polymorphism is achieved by function overloading or operator overloading.

        Function Overloading: 
            When there are multiple functions with same name but different parameters then these functions are 
            said to be overloaded. Functions can be overloaded by change in number of arguments or/and change 
            in type of arguments

            FUNCTION OVERLOADING
                // C++ program for function overloading
                #include <bits/stdc++.h>
                
                using namespace std;
                class Geeks
                {
                    public:
                    
                    // function with 1 int parameter
                    void func(int x)
                    {
                        cout << "value of x is " << x << endl;
                    }
                    
                    // function with same name but 1 double parameter
                    void func(double x)
                    {
                        cout << "value of x is " << x << endl;
                    }
                    
                    // function with same name and 2 int parameters
                    void func(int x, int y)
                    {
                        cout << "value of x and y is " << x << ", " << y << endl;
                    }
                };
                
                int main() {
                    
                    Geeks obj1;
                    
                    // Which function is called will depend on the parameters passed
                    // The first 'func' is called 
                    obj1.func(7);
                    
                    // The second 'func' is called
                    obj1.func(9.132);
                    
                    // The third 'func' is called
                    obj1.func(85,64);
                    return 0;
                }

        Operator Overloading:
            C++ also provide option to overload operators. For example, we can make the operator (‘+’) for 
            string class to concatenate two strings. We know that this is the addition operator whose task is 
            to add two operands. So a single operator ‘+’ when placed between integer operands , adds them and 
            when placed between string operands, concatenates them.


            OPERATOR OVERLOADING
                // CPP program to illustrate
                // Operator Overloading
                #include<iostream>
                using namespace std;
                
                class Complex {
                private:
                    int real, imag;
                public:
                    Complex(int r = 0, int i =0)  {real = r;   imag = i;}
                    
                    // This is automatically called when '+' is used with
                    // between two Complex objects
                    Complex operator + (Complex const &obj) {
                        Complex res;
                        res.real = real + obj.real;
                        res.imag = imag + obj.imag;
                        return res;
                    }
                    void print() { cout << real << " + i" << imag << endl; }
                };
                
                int main()
                {
                    Complex c1(10, 5), c2(2, 4);
                    Complex c3 = c1 + c2; // An example call to "operator+"
                    c3.print();
                }    